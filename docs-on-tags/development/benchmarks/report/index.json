{"project": "foapy", "project_url": "https://github.com/intervals-mining-lab/foapy", "show_commit_url": "https://github.com/intervals-mining-lab/foapy/commit/", "hash_length": 8, "revision_to_hash": {"0": "dea832992b2fddb3cebe8c3f1d4c2d63ede33ab9", "1": "afe8a142b4552998bd0fd9a92811978b8c8c2dc7", "2": "6442ceb7d41947f7cb7df0aa86902e4d01168caa", "3": "abf0434ee53f89d9e54c78a65f503b8475aea588", "4": "4f2294ee70218045562321e262222ac714ccbb12", "5": "1ebd1a2a9a190db4e5737d8e81bc61884500f473", "6": "2341bd1940faaf3ed9d1b5d1ea471b2f60ec0eae", "7": "5345c810b0f2056953a959e19e6a95c0177ddf9a", "12": "43a9644486dc5c30b4c13b51b02f405163c54045", "14": "b67a8e5733f064c97070056634dba571caf8718b", "17": "74b068c2255861a6ac79c5cd0b8725b6cf8d674b", "20": "fcf8d898f920838f67cda39eeb9fb4ad0afad12e", "21": "2a17ced5377477de75ea33a1e70ded5d19dfa657", "22": "518954c414c05b935c342f1b065c5a7603817d0b", "23": "4f50b6a9d23073216c4164966e40870f6f11fb62", "24": "f87f431f6fc05b8b207bf0b59a7f736af078a657", "25": "8385701c23f6db3a7552fb843d6f82488299893f", "26": "8a82869ff5004fcd256fb07d51d72b2fbb171bda", "27": "cefb78dec8542d9afc01ea8e1706e6627c59bc9a", "28": "e5ac763a44dbd0b2fc1a5a38ba0260c81dffff70", "30": "3da136a1ea58c626c8f0cd78eee3c664dea33dc1", "31": "1bed8387bd8a95440d8e1b8aece98d55fa2a075b", "32": "627f151855721ff5a27866e992d1602cdcbb25f3", "34": "1f6ecca5e59eadd6968e07d67ad139f008bd1ac7", "35": "2450603d225424276efaca8931ad5db80c0eec3e", "36": "74af1562c31d543ba8fa8bf0618d8522f87aa54b", "37": "d7b1dc6f2b5dac30a3ef1d68a0954a1f540b369f", "38": "909e12c0954e01f0fd01e86febeda77f4f253f56", "39": "18c2fd71c7ba3d0b2197da9fd23fe35c77f9fa97", "40": "3087da01d2f7b946eebffcbcf23a1d8e3d86cfbc", "41": "62dc52bf34150d9a54b5af70d8cbacb0dd87da20", "42": "5b72e82eab173185ec510bdebdb796e4b2964785", "43": "d5cd6c1cb15d378fa665e74600c52999856b3750", "44": "41f0ede2aa4e6da15492457b5c44c7d235c5756c", "45": "6731f3bf3ccb7456faef29df1f2066da2d71e0f4", "46": "cc6ad6f0bd4773ad4a4b00cf3904f390802c1753", "47": "e4391b40be81b29e97eaf4d7fca528ca8fa0ad90", "48": "0697d50562ec77b2dec3f551978dd85f9b820ed9", "49": "bbc5c02b830744556591e45f572ef229e5676a3c", "50": "c964f16c503c3c1581ee15dd37f7c533bab51c15", "51": "cdb4b4223bba3c4149bd6b1c40f3d8c11a224644", "52": "29997430515afcee0ced5c5c9ebd3b3c82cab822", "53": "73ee8d843a20c60a439be2d7b4e0f75a926f6e61", "54": "9856b263d33c86948192abbe93c45069502c47f1", "55": "35f59849a57b17189a8f517b7f3c57bb9e29c451", "56": "66966a218aa7db6eb3fafd2570719bc255bfe9b8", "57": "a6f53172df761a7d2275c013bb292b7e03e6a87a", "58": "f584ed181bf544d0159c93948a9a9d2b1a971b9b", "64": "d44ea610cfdd897759fae2cf5c3ac74cb710f907", "65": "5d5e17f1c836a7c31568a80699b8f572705a0497", "66": "9366cb19842f7c504c9721cc70fdb8d6708b695f", "88": "139855e447d828274f25c78d0965156b982c5012", "98": "65ce041bfbfb824223ff938b2c1557dc6dbc3d25"}, "revision_to_date": {"0": 1709635659000, "1": 1709639155000, "2": 1709640152000, "3": 1710623216000, "4": 1710660638000, "5": 1710660844000, "6": 1711713136000, "7": 1711715380000, "12": 1712608805000, "14": 1712628690000, "17": 1714203277000, "20": 1714208663000, "21": 1719231150000, "22": 1719233739000, "23": 1721303503000, "24": 1722151873000, "25": 1722154677000, "26": 1722176727000, "27": 1722326828000, "28": 1722328011000, "30": 1727024494000, "31": 1727030667000, "32": 1727031444000, "34": 1728887383000, "35": 1729028605000, "36": 1729028760000, "37": 1729028887000, "38": 1729029038000, "39": 1729029509000, "40": 1729113603000, "41": 1729113689000, "42": 1729113749000, "43": 1729114263000, "44": 1729114957000, "45": 1729115271000, "46": 1729115625000, "47": 1729115926000, "48": 1729115982000, "49": 1729723787000, "50": 1729726466000, "51": 1731155639000, "52": 1731155896000, "53": 1731160225000, "54": 1731858274000, "55": 1731860296000, "56": 1731860736000, "57": 1731862085000, "58": 1732370438000, "64": 1737803040000, "65": 1737803871000, "66": 1737908268000, "88": 1741393253000, "98": 1741432045000}, "params": {"machine": ["gh-runner"], "python": ["3.11"], "Cython": [""], "build": [""], "packaging": [""], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "gh-runner", "python": "3.11", "Cython": "", "build": "", "packaging": "", "branch": "HEAD"}], "benchmarks": {"bench_alphabet.AlphabetSuite.peakmem_alphabet": {"code": "class AlphabetSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def peakmem_alphabet(self, length, case):\n        return alphabet(self.data)\n\n    def setup(self, length, case):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)", "name": "bench_alphabet.AlphabetSuite.peakmem_alphabet", "param_names": ["length", "case"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"]], "type": "peakmemory", "unit": "bytes", "version": "463b1c9c8d98e579489ab8237252f666a0252bb221e3700c1d86ec1e981f36bb"}, "bench_alphabet.AlphabetSuite.time_alphabet": {"code": "class AlphabetSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def time_alphabet(self, length, case):\n        alphabet(self.data)\n\n    def setup(self, length, case):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)", "min_run_count": 2, "name": "bench_alphabet.AlphabetSuite.time_alphabet", "number": 0, "param_names": ["length", "case"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3c996c04e73bb47e942a0b0f63685b68f97629ec6b986709b8eb327d6e4d246e", "warmup_time": -1}, "bench_intervals.IntervalsSuite.peakmem_intervals": {"code": "class IntervalsSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def peakmem_intervals(self, length, case, binding, mode):\n        return intervals(self.data, self.binding, self.mode)\n\n    def setup(self, length, case, binding, mode):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)\n        self.mode = mode\n        self.binding = binding", "name": "bench_intervals.IntervalsSuite.peakmem_intervals", "param_names": ["length", "case", "binding", "mode"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"], ["1", "2"], ["1", "2", "3", "4"]], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "cdfbe702e4fc9f5ed74743bb6d8813258ea3aea30a6a7b0eea742b144c71d9a2"}, "bench_intervals.IntervalsSuite.time_intervals": {"code": "class IntervalsSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def time_intervals(self, length, case, binding, mode):\n        intervals(self.data, self.binding, self.mode)\n\n    def setup(self, length, case, binding, mode):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)\n        self.mode = mode\n        self.binding = binding", "min_run_count": 2, "name": "bench_intervals.IntervalsSuite.time_intervals", "number": 0, "param_names": ["length", "case", "binding", "mode"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"], ["1", "2"], ["1", "2", "3", "4"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "88a6ddabdce77504c2e9faa2c6f06acd4d47b956c7e573d26dda918f8efeb559", "warmup_time": -1}, "bench_ma_alphabet.MaAlphabetSuite.peakmem_alphabet": {"code": "class MaAlphabetSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def peakmem_alphabet(self, length, case):\n        return alphabet(self.data)\n\n    def setup(self, length, case):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)", "name": "bench_ma_alphabet.MaAlphabetSuite.peakmem_alphabet", "param_names": ["length", "case"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"]], "type": "peakmemory", "unit": "bytes", "version": "6e5e510a52e8d21c72d7ca2d726d6dd589b42a2acb42911270a0b72914790609"}, "bench_ma_alphabet.MaAlphabetSuite.time_alphabet": {"code": "class MaAlphabetSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def time_alphabet(self, length, case):\n        alphabet(self.data)\n\n    def setup(self, length, case):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)", "min_run_count": 2, "name": "bench_ma_alphabet.MaAlphabetSuite.time_alphabet", "number": 0, "param_names": ["length", "case"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ab88f8572fb327c6c31ca3c0814653ab762ad5776a477b8a998ef33ccce5f1dd", "warmup_time": -1}, "bench_ma_intervals.MaIntervalsSuite.peakmem_intervals": {"code": "class MaIntervalsSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def peakmem_intervals(self, length, case, binding, mode):\n        return intervals(self.data, self.binding, self.mode)\n\n    def setup(self, length, case, binding, mode):\n        if case == \"Best\":\n            self.data = order(best_case(length))\n        elif case == \"DNA\":\n            self.data = order(dna_case(length))\n        elif case == \"Normal\":\n            self.data = order(normal_case(length))\n        elif case == \"Worst\":\n            self.data = order(worst_case(length))\n        self.mode = mode\n        self.binding = binding", "name": "bench_ma_intervals.MaIntervalsSuite.peakmem_intervals", "param_names": ["length", "case", "binding", "mode"], "params": [["5", "50", "500"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"], ["1", "2"], ["1", "2", "3", "4"]], "type": "peakmemory", "unit": "bytes", "version": "749267a53459bb7c11be23b1e017c910501fb9fc320e806f2a0c0455b864a133"}, "bench_ma_intervals.MaIntervalsSuite.time_intervals": {"code": "class MaIntervalsSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def time_intervals(self, length, case, binding, mode):\n        intervals(self.data, self.binding, self.mode)\n\n    def setup(self, length, case, binding, mode):\n        if case == \"Best\":\n            self.data = order(best_case(length))\n        elif case == \"DNA\":\n            self.data = order(dna_case(length))\n        elif case == \"Normal\":\n            self.data = order(normal_case(length))\n        elif case == \"Worst\":\n            self.data = order(worst_case(length))\n        self.mode = mode\n        self.binding = binding", "min_run_count": 2, "name": "bench_ma_intervals.MaIntervalsSuite.time_intervals", "number": 0, "param_names": ["length", "case", "binding", "mode"], "params": [["5", "50", "500"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"], ["1", "2"], ["1", "2", "3", "4"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b4e3235699185c220b989971f4f831555ea8fe3a332dc2a7ed38ce4fbb58063a", "warmup_time": -1}, "bench_ma_order.MaOrderSuite.peakmem_order": {"code": "class MaOrderSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def peakmem_order(self, length, case):\n        return order(self.data)\n\n    def setup(self, length, case):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)", "name": "bench_ma_order.MaOrderSuite.peakmem_order", "param_names": ["length", "case"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"]], "type": "peakmemory", "unit": "bytes", "version": "c6301f9d459e943b65197043631559919d11ab43e4271b87b8e77d8011924e37"}, "bench_ma_order.MaOrderSuite.time_order": {"code": "class MaOrderSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def time_order(self, length, case):\n        order(self.data)\n\n    def setup(self, length, case):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)", "min_run_count": 2, "name": "bench_ma_order.MaOrderSuite.time_order", "number": 0, "param_names": ["length", "case"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5e4d982f76f473860f0d4ab8fe6f909c8a6f27e1142b69b5fc25dcd507a389fb", "warmup_time": -1}, "bench_order.OrderSuite.peakmem_order": {"code": "class OrderSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def peakmem_order(self, length, case):\n        return order(self.data)\n\n    def setup(self, length, case):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)", "name": "bench_order.OrderSuite.peakmem_order", "param_names": ["length", "case"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"]], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "13f7bc1acac53509a5c760dc26174ec96dc6cc7a7829211e16a0718700cf2e65"}, "bench_order.OrderSuite.time_order": {"code": "class OrderSuite:\n    @skip_params_if(skip, os.getenv(\"QUICK_BENCHMARK\") == \"true\")\n    def time_order(self, length, case):\n        order(self.data)\n\n    def setup(self, length, case):\n        if case == \"Best\":\n            self.data = best_case(length)\n        elif case == \"DNA\":\n            self.data = dna_case(length)\n        elif case == \"Normal\":\n            self.data = normal_case(length)\n        elif case == \"Worst\":\n            self.data = worst_case(length)", "min_run_count": 2, "name": "bench_order.OrderSuite.time_order", "number": 0, "param_names": ["length", "case"], "params": [["5", "50", "500", "5000", "50000", "500000", "5000000", "50000000"], ["'Best'", "'DNA'", "'Normal'", "'Worst'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "2d50c8901642ed79989dc1d3e0e555bf76ae10438357fbbf9c6f8bf064d00bcc", "warmup_time": -1}}, "machines": {"gh-runner": {"machine": "gh-runner", "version": 1}}, "tags": {"0.0.10": 58, "0.0.11": 66, "0.0.12": 88, "0.0.2": 48, "0.0.3": 49, "0.0.4": 50, "0.0.5": 52, "0.0.6": 54, "0.0.7": 55, "0.0.8": 56, "0.0.9": 57}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}